@article{SOLEIMANINEYSIANI2020106344,
title = {Efficient feature extraction model for validation performance improvement of duplicate bug report detection in software bug triage systems},
journal = {Information and Software Technology},
volume = {126},
pages = {106344},
year = {2020},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2020.106344},
url = {https://www.sciencedirect.com/science/article/pii/S0950584920301117},
author = {Behzad {Soleimani Neysiani} and Seyed Morteza Babamir and Masayoshi Aritsugi},
keywords = {Duplicate detection, Bug reports, Information retrieval, Feature selection, Dimension reduction, Natural language processing, Textual similarity metric, Feature extraction}
}

@unpublished{PLATFORMARCHITECTURE,
title = {platform architecture},
author = {Google},
year = {2020},
note = {https://developer.android.com/guide/platform}
}

@unpublished{NINJABUILD,
title = {Ninja, a small build system with focus on speed},
author = {Google and {evmar}},
year = {2020},
note = {https://ninja-build.org/}
}

@inproceedings{ICSM-2013-AsaduzzamanRSP,
	author        = "Muhammad Asaduzzaman and Chanchal K. Roy and Kevin A. Schneider and Massimiliano Di Penta",
	booktitle     = "{Proceedings of the 29th International Conference on Software Maintenance}",
	doi           = "10.1109/ICSM.2013.34",
	pages         = "230--239",
	publisher     = "{IEEE}",
	title         = "{LHDiff: A Language-Independent Hybrid Approach for Tracking Source Code Lines}",
	year          = 2013,
	note          = "https://icsm2013.tue.nl/ICSM2013.pdf"
}

@article{SPAE-1985-AFileComparisonProgram,
author = {Webb Miller and Eugene W. Myers},
year = {1985},
title = {A File Comparison Program},
note = {https://publications.mpi-cbg.de/Miller_1985_5440.pdf}
}

@inproceedings{DBLP:conf/kbse/FalleriMBMM14,
  author    = {Jean{-}R{\'{e}}my Falleri and
               Flor{\'{e}}al Morandat and
               Xavier Blanc and
               Matias Martinez and
               Martin Monperrus},
  title     = {Fine-grained and accurate source code differencing},
  booktitle = {{ACM/IEEE} International Conference on Automated Software Engineering,
               {ASE} '14, Vasteras, Sweden - September 15 - 19, 2014},
  pages     = {313--324},
  year      = {2014},
  url       = {http://doi.acm.org/10.1145/2642937.2642982},
  doi       = {10.1145/2642937.2642982},
  note      = {https://hal.archives-ouvertes.fr/hal-01054552/document},
}

@article{Nugroho_2019,
	doi = {10.1007/s10664-019-09772-z},
	url = {https://doi.org/10.1007\%2Fs10664-019-09772-z},
	year = 2019,
	month = {sep},
	publisher = {Springer Science and Business Media {LLC}},
	volume = {25},
	number = {1},
	pages = {790--823},
	author = {Yusuf Sulistyo Nugroho and Hideaki Hata and Kenichi Matsumoto},
	title = {How different are different diff algorithms in Git?},
	journal = {Empirical Software Engineering},
}

@book{DISCRETEMATH,
author = {Wanling Qu and Suyun Geng and Li'ang Zhang},
title = {图的基本概念，图论},
booktitle = {离散数学 (第 2 版)},
pages = {293--295},
year = {2015},
}

@book{DBLP:books/daglib/0023376,
  author    = {Thomas H. Cormen and
               Charles E. Leiserson and
               Ronald L. Rivest and
               Clifford Stein},
  title     = {Introduction to Algorithms, 3rd Edition},
  publisher = {{MIT} Press},
  year      = {2009},
  url       = {http://mitpress.mit.edu/books/introduction-algorithms},
  isbn      = {978-0-262-03384-8},
  timestamp = {Mon, 17 Aug 2020 01:00:00 +0200},
  biburl    = {https://dblp.org/rec/books/daglib/0023376.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{GRAPHREACHABILITY,
author = {Reps, Thomas},
title = {Program Analysis via Graph Reachability},
year = {1997},
isbn = {0262631806},
publisher = {MIT Press},
address = {Cambridge, MA, USA},
booktitle = {Proceedings of the 1997 International Symposium on Logic Programming},
pages = {5–19},
numpages = {15},
location = {Port Washington, New York, USA},
series = {ILPS '97}
}

@book{MoellerS20,
  title = {Static Program Analysis},
  author = {Anders Møller and Michael I. Schwartzbach},
  year = {2020},
  month = {November},
  url = {https://cs.au.dk/~amoeller/spa/},
  researchr = {https://researchr.org/publication/MoellerS20},
  cites = {0},
  citedby = {0},
  organization = {Department of Computer Science, Aarhus University},
}

@InProceedings{JSP19,
    author    = {J{\'a}sz, Judit and Siket, Istv\'an and Peng\H{o}, Edit and S\'agodi, Zolt\'an and Ferenc, Rudolf},
    title     = {Systematic Comparison of Six Open-source Java Call Graph Construction Tools},
    booktitle = {Proceedings of the 14th International Conference on Software and Data Technologies (ICSOFT)},
    year      = {2019},
    pages     = {117--128},
    address   = {Prague, Czech Republic},
    month     = jul,
    publisher = {INSTICC Press},
    doi       = {10.5220/0007929201170128},
    keywords  = {Call graph, Java, Static analysis, Tool comparison},
    url       = {http://www.scitepress.org/DigitalLibrary/Link.aspx?doi=10.5220/0007929201170128},
}

@phdthesis{FLOWSENSITIVECONTROLFLOWANALYSIS,
author = {Adams, Michael D.},
advisor = {Dybvig, R. Kent},
title = {Flow-Sensitive Control-Flow Analysis in Linear-Log Time},
year = {2011},
isbn = {9781267077776},
publisher = {Indiana University},
address = {USA},
abstract = {The flexibility of dynamically typed languages such as JavaScript, Python, Ruby, and Scheme comes at the cost of run-time type checks. Some of these checks can be eliminated via control-flow analysis. However, traditional control-flow analysis (CFA) is not ideal for this task as it ignores flow-sensitive information that can be gained from dynamic type predicates, such as JavaScript's instanceof and Scheme's pair?, and from type-restricted operators, such as Scheme's car. Yet, adding flow-sensitivity to a traditional CFA worsens the already significant compile-time cost of traditional CFA. This makes it unsuitable for use in just-in-time compilers.In response, this dissertation presents a fast, flow-sensitive type-recovery algorithm based on the linear-time, flow-insensitive sub-0CFA. The algorithm has been implemented as an experimental optimization into Chez Scheme compiler, where it has proven to be effective, justifying the elimination of about 60% of run-time type checks in a large set of bench-marks. The algorithm processes on average over 100,000 lines of code per second and scales well asymptotically, running in only O(n log n) time. This compile-time performance and scalability is achieved through a novel combination of data structures and algorithms.},
note = {AAI3488016}
}

@inproceedings{AHybridSoftwareChangeImpactAnalysis,
	author        = "Wen Chen",
	booktitle     = "{A Hybrid Software Change Impact Analysis for Large-scale Enterprise Systems}",
	pages         = "137--139",
	year          = 2015,
	note          = "https://macsphere.mcmaster.ca/bitstream/11375/18275/2/Chen_Wen_201509_PhD.pdf"
}

@inproceedings{CALLGRAPHCONSTRUCTION,
author = {Reif, Michael and Eichberg, Michael and Hermann, Ben and Lerch, Johannes and Mezini, Mira},
title = {Call Graph Construction for Java Libraries},
year = {2016},
isbn = {9781450342186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2950290.2950312},
doi = {10.1145/2950290.2950312},
booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {474–486},
numpages = {13},
keywords = {Call Graph Construction, Libraries, Java},
location = {Seattle, WA, USA},
series = {FSE 2016}
}
